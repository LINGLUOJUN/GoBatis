// Please don't edit this file!
package gentest

import (
	"context"
	"errors"
	"reflect"

	gobatis "github.com/runner-mei/GoBatis"
)

func init() {
	gobatis.Init(func(ctx *gobatis.InitContext) error {
		{ //// UserUpdater.UpsertOnID
			if _, exists := ctx.Statements["UserUpdater.UpsertOnID"]; !exists {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"ID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*User)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnID error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnID",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnID"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnIdOnUsername
			if _, exists := ctx.Statements["UserUpdater.UpsertOnIdOnUsername"]; !exists {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"ID",
						"Username",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*User)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnIdOnUsername error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnIdOnUsername",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnIdOnUsername"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnUsername
			if _, exists := ctx.Statements["UserUpdater.UpsertOnUsername"]; !exists {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"Username",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*User)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnUsername error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnUsername",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnUsername"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnBD
			if _, exists := ctx.Statements["UserUpdater.UpsertOnBD"]; !exists {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"BirthDay",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*User)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnBD error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnBD",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnBD"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnUser
			if _, exists := ctx.Statements["UserUpdater.UpsertOnUser"]; !exists {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile{}),
					[]string{
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnUser error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnUser",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnUser"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnKeyOnUserID
			if _, exists := ctx.Statements["UserUpdater.UpsertOnKeyOnUserID"]; !exists {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile{}),
					[]string{
						"Key",
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnKeyOnUserID error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnKeyOnUserID",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnKeyOnUserID"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnKeyOnUser
			if _, exists := ctx.Statements["UserUpdater.UpsertOnKeyOnUser"]; !exists {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile{}),
					[]string{
						"Key",
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnKeyOnUser error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnKeyOnUser",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnKeyOnUser"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnUID
			if _, exists := ctx.Statements["UserUpdater.UpsertOnUID"]; !exists {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile{}),
					[]string{
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnUID error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnUID",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnUID"] = stmt
			}
		}
		return nil
	})
}

func NewUserUpdater(ref gobatis.SqlSession) UserUpdater {
	if ref == nil {
		panic(errors.New("param 'ref' is nil"))
	}
	if reference, ok := ref.(*gobatis.Reference); ok {
		if reference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	} else if valueReference, ok := ref.(gobatis.Reference); ok {
		if valueReference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	}
	return &UserUpdaterImpl{session: ref}
}

type UserUpdaterImpl struct {
	session gobatis.SqlSession
}

func (impl *UserUpdaterImpl) UpsertOnID(user *User) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnID",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnIdOnUsername(user *User) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnIdOnUsername",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnUsername(user *User) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnUsername",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnBD(user *User) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnBD",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnUser(user *UserProfile) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnUser",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnKeyOnUserID(user *UserProfile) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnKeyOnUserID",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnKeyOnUser(user *UserProfile) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnKeyOnUser",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnUID(user *UserProfile) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnUID",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}
