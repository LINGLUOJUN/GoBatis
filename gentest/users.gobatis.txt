// Please don't edit this file!
package gentest

import (
	"context"
	"database/sql"
	"errors"
	"reflect"

	gobatis "github.com/runner-mei/GoBatis"
)

func init() {
	gobatis.Init(func(ctx *gobatis.InitContext) error {
		{ //// Users.Insert
			if _, exists := ctx.Statements["Users.Insert"]; !exists {
				sqlStr, err := gobatis.GenerateInsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}), false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Insert error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Insert",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Insert"] = stmt
			}
		}
		{ //// Users.Update
			if _, exists := ctx.Statements["Users.Update"]; !exists {
				sqlStr, err := gobatis.GenerateUpdateSQL(ctx.Dialect, ctx.Mapper,
					"u.", reflect.TypeOf(&User{}),
					[]string{
						"id",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
					})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Update error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Update",
					gobatis.StatementTypeUpdate,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Update"] = stmt
			}
		}
		{ //// Users.DeleteAll
			if _, exists := ctx.Statements["Users.DeleteAll"]; !exists {
				sqlStr, err := gobatis.GenerateDeleteSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{},
					[]reflect.Type{},
					[]gobatis.Filter{})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.DeleteAll error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.DeleteAll",
					gobatis.StatementTypeDelete,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.DeleteAll"] = stmt
			}
		}
		{ //// Users.Delete
			if _, exists := ctx.Statements["Users.Delete"]; !exists {
				sqlStr, err := gobatis.GenerateDeleteSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"id",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
					},
					[]gobatis.Filter{})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Delete error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Delete",
					gobatis.StatementTypeDelete,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Delete"] = stmt
			}
		}
		{ //// Users.Get
			if _, exists := ctx.Statements["Users.Get"]; !exists {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"id",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
					},
					[]gobatis.Filter{},
					"")
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Get error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Get",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Get"] = stmt
			}
		}
		{ //// Users.Count
			if _, exists := ctx.Statements["Users.Count"]; !exists {
				sqlStr, err := gobatis.GenerateCountSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{},
					[]reflect.Type{},
					[]gobatis.Filter{})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Count error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Count",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Count"] = stmt
			}
		}
		{ //// Users.GetName
			if _, exists := ctx.Statements["Users.GetName"]; !exists {
				return errors.New("sql 'Users.GetName' error : statement not found - Generate SQL fail: sql is undefined")
			}
		}
		{ //// Users.Roles
			if _, exists := ctx.Statements["Users.Roles"]; !exists {
				return errors.New("sql 'Users.Roles' error : statement not found - Generate SQL fail: recordType is unknown")
			}
		}
		{ //// Users.UpdateName
			if _, exists := ctx.Statements["Users.UpdateName"]; !exists {
				sqlStr, err := gobatis.GenerateUpdateSQL2(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}), reflect.TypeOf(new(int64)), "id", []string{
						"username",
					})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.UpdateName error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.UpdateName",
					gobatis.StatementTypeUpdate,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.UpdateName"] = stmt
			}
		}
		{ //// Users.InsertName
			if _, exists := ctx.Statements["Users.InsertName"]; !exists {
				sqlStr, err := gobatis.GenerateInsertSQL2(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{"name"}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.InsertName error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.InsertName",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.InsertName"] = stmt
			}
		}
		{ //// Users.Find1
			if _, exists := ctx.Statements["Users.Find1"]; !exists {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{},
					[]reflect.Type{},
					[]gobatis.Filter{
						{Expression: "id = 1"},
					},
					"")
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Find1 error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Find1",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Find1"] = stmt
			}
		}
		{ //// Users.Find2
			if _, exists := ctx.Statements["Users.Find2"]; !exists {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{},
					[]reflect.Type{},
					[]gobatis.Filter{
						{Expression: "id = 1"},
						{Expression: "name = 'a'"},
					},
					"")
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Find2 error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Find2",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Find2"] = stmt
			}
		}
		{ //// Users.Find3
			if _, exists := ctx.Statements["Users.Find3"]; !exists {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"id",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
					},
					[]gobatis.Filter{
						{Expression: "id > #{id}"},
					},
					"")
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Find3 error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Find3",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Find3"] = stmt
			}
		}
		{ //// Users.Find4
			if _, exists := ctx.Statements["Users.Find4"]; !exists {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"id",
						"name",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
						reflect.TypeOf(new(string)).Elem(),
					},
					[]gobatis.Filter{
						{Expression: "id > #{id}"},
					},
					"")
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Find4 error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Find4",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Find4"] = stmt
			}
		}
		{ //// Users.Find5
			if _, exists := ctx.Statements["Users.Find5"]; !exists {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"id",
						"name",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
						reflect.TypeOf(new(string)).Elem(),
					},
					[]gobatis.Filter{
						{Expression: "id > #{id}"},
					},
					"created_at ASC")
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Find5 error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Find5",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Find5"] = stmt
			}
		}
		return nil
	})
}

func NewUsers(ref *gobatis.Reference) Users {
	return &UsersImpl{session: ref}
}

type UsersImpl struct {
	session *gobatis.Reference
}

func (impl *UsersImpl) Insert(u *User) (int64, error) {
	return impl.session.Insert(context.Background(), "Users.Insert",
		[]string{
			"u",
		},
		[]interface{}{
			u,
		})
}

func (impl *UsersImpl) Update(id int64, u *User) (int64, error) {
	return impl.session.Update(context.Background(), "Users.Update",
		[]string{
			"id",
			"u",
		},
		[]interface{}{
			id,
			u,
		})
}

func (impl *UsersImpl) DeleteAll() (int64, error) {
	return impl.session.Delete(context.Background(), "Users.DeleteAll", nil, nil)
}

func (impl *UsersImpl) Delete(id int64) (int64, error) {
	return impl.session.Delete(context.Background(), "Users.Delete",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		})
}

func (impl *UsersImpl) Get(id int64) (*User, error) {
	var instance = &User{}

	err := impl.session.SelectOne(context.Background(), "Users.Get",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		}).Scan(instance)
	if err != nil {
		return nil, err
	}

	return instance, nil
}

func (impl *UsersImpl) Count() (int64, error) {
	var instance int64
	var nullable gobatis.Nullable
	nullable.Value = &instance

	err := impl.session.SelectOne(context.Background(), "Users.Count", nil, nil).Scan(&nullable)
	if err != nil {
		return 0, err
	}
	if !nullable.Valid {
		return 0, sql.ErrNoRows
	}

	return instance, nil
}

func (impl *UsersImpl) GetName(id int64) (string, error) {
	var instance string
	var nullable gobatis.Nullable
	nullable.Value = &instance

	err := impl.session.SelectOne(context.Background(), "Users.GetName",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		}).Scan(&nullable)
	if err != nil {
		return "", err
	}
	if !nullable.Valid {
		return "", sql.ErrNoRows
	}

	return instance, nil
}

func (impl *UsersImpl) Roles(id int64) ([]Role, error) {
	var instances []Role
	results := impl.session.Select(context.Background(), "Users.Roles",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		})
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (impl *UsersImpl) UpdateName(id int64, username string) (int64, error) {
	return impl.session.Update(context.Background(), "Users.UpdateName",
		[]string{
			"id",
			"username",
		},
		[]interface{}{
			id,
			username,
		})
}

func (impl *UsersImpl) InsertName(name string) (int64, error) {
	return impl.session.Insert(context.Background(), "Users.InsertName",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		})
}

func (impl *UsersImpl) Find1() ([]User, error) {
	var instances []User
	results := impl.session.Select(context.Background(), "Users.Find1", nil, nil)
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (impl *UsersImpl) Find2() ([]User, error) {
	var instances []User
	results := impl.session.Select(context.Background(), "Users.Find2", nil, nil)
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (impl *UsersImpl) Find3(id int64) ([]User, error) {
	var instances []User
	results := impl.session.Select(context.Background(), "Users.Find3",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		})
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (impl *UsersImpl) Find4(id int64, name string) ([]User, error) {
	var instances []User
	results := impl.session.Select(context.Background(), "Users.Find4",
		[]string{
			"id",
			"name",
		},
		[]interface{}{
			id,
			name,
		})
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (impl *UsersImpl) Find5(id int64, name string) ([]User, error) {
	var instances []User
	results := impl.session.Select(context.Background(), "Users.Find5",
		[]string{
			"id",
			"name",
		},
		[]interface{}{
			id,
			name,
		})
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func init() {
	gobatis.Init(func(ctx *gobatis.InitContext) error {
		{ //// UserExDao.InsertName
			if _, exists := ctx.Statements["UserExDao.InsertName"]; !exists {
				sqlStr, err := gobatis.GenerateInsertSQL2(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{"name"}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserExDao.InsertName error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserExDao.InsertName",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserExDao.InsertName"] = stmt
			}
		}
		return nil
	})
}

func NewUserExDao(ref *gobatis.Reference) UserExDao {
	return &UserExDaoImpl{session: ref}
}

type UserExDaoImpl struct {
	session *gobatis.Reference
}

func (impl *UserExDaoImpl) InsertName(name string) (int64, error) {
	return impl.session.Insert(context.Background(), "UserExDao.InsertName",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		})
}
